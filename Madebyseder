function SendMessage(url, message)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["content"] = message
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
    print("Sent")
end

function SendMessageEMBED(url, embed)
    local http = game:GetService("HttpService")
    local headers = {
        ["Content-Type"] = "application/json"
    }
    local data = {
        ["embeds"] = {
            {
                ["title"] = "@WebHook Ping",
                ["description"] = embed.description,
                ["color"] = embed.color,
                ["fields"] = embed.fields,
                ["footer"] = {
                    ["text"] = embed.footer.text
                },
                ["thumbnail"] = {
                    ["url"] = embed.thumbnail -- Add the thumbnail URL here
                }
            }
        }
    }
    local body = http:JSONEncode(data)
    local response = request({
        Url = url,
        Method = "POST",
        Headers = headers,
        Body = body
    })
    print("Sent")
end

-- Replace with your actual webhook URL
local url = "https://discord.com/api/webhooks/1302552363524952136/5KFbHoDRvK7IFUVAzu9C2Goi7NhzSJf0QE4DM9PuwsgS_htPDEzqX3DJ3fSr_1Z2FXZs"

-- Ping message to send
local pingMessage = "@WebHook Ping" -- This is the message to ping

-- Send a message to ping
SendMessage(url, pingMessage)

-- Get the Job ID
local jobId = game.JobId

-- Get the player's name and user ID
local player = game.Players.LocalPlayer
local playerName = player.Name
local userId = player.UserId

-- Construct the avatar URL (ensure it returns PNG)
local avatarUrl = "https://www.roblox.com/headshot-thumbnail/image?userId=" .. userId .. "&width=420&height=420&format=Png"

-- Construct the profile link for the player ID
local playerIdLink = "https://www.roblox.com/users/" .. userId .. "/profile"

-- Example to send an embedded message including player name, Job ID, and a join link
local embed = {
    ["description"] = "Click Me to get the WebHook Ping",
    ["color"] = 65280, -- Green color
    ["fields"] = {
        {
            ["name"] = "Player Name",
            ["value"] = playerName -- Showing player's name in Field 1
        },
        {
            ["name"] = "Player ID", -- Field for Player ID with link
            ["value"] = "[" .. tostring(userId) .. "](" .. playerIdLink .. ")" -- Clickable link to player's profile
        },
        {
            ["name"] = "Join Game",
            ["value"] = "[Click here to join the game](https://www.roblox.com/games/14410213941/Shoot-and-Eat-Noobs)" -- Link to your game
        },
        {
            ["name"] = "Job ID",
            ["value"] = jobId -- Including Job ID in the embed
        }
    },
    ["footer"] = {
        ["text"] = "Shoot And Eat Noobs Notifys"
    },
    ["thumbnail"] = avatarUrl -- Add the avatar URL here for the thumbnail
}

SendMessageEMBED(url, embed)

local redzlib = loadstring(game:HttpGet("https://raw.githubusercontent.com/REDzHUB/RedzLibV5/main/Source.Lua"))()

local Window = redzlib:MakeWindow({
    Title = "Seder Hub | Shoot And Eat Noobs",
    SubTitle = "by SederYTTV",
    SaveFolder = "testando | redz lib v5.lua"
})

-- Create the Auto Farms tab
local Tab2 = Window:MakeTab({
    Name = "Auto Farms",
    Icon = "swords"
})

-- Create the Visual tab with the cherry icon
local TabVisual = Window:MakeTab({
    Name = "Visual",
    Icon = "cherry"
})

-- Function to get all model names in the specified folder
local function getModelsInFolder(folder)
    local models = {}
    for _, model in pairs(folder:GetChildren()) do
        if model:IsA("Model") then
            table.insert(models, model.Name)
        end
    end
    return models
end

-- Get the folder
local npcFolder = workspace:WaitForChild("HumanoidFolder"):WaitForChild("NPCFolder")
local selectedModelName = nil
local teleporting = false
local teleportLoop
local Dropdown

-- Function to update the dropdown options
local function updateDropdown()
    local npcModels = getModelsInFolder(npcFolder)
    Dropdown:UpdateOptions(npcModels)
    if selectedModelName and not table.find(npcModels, selectedModelName) then
        selectedModelName = npcModels[1]
    end
    Dropdown:Close()
end

-- Initial dropdown creation
Dropdown = Tab2:AddDropdown({
    Name = "Noob List",
    Description = "Select the <font color='rgb(88, 101, 242)'>Number</font>",
    Options = getModelsInFolder(npcFolder),
    Default = nil,
    Flag = "dropdown teste",
    Callback = function(newModelName)
        selectedModelName = newModelName
    end
})

-- Auto Eat toggle
local autoEatEnabled = false

local function toggleAutoEat(state)
    autoEatEnabled = state
    if autoEatEnabled then
        -- Start the Auto Eat loop with a description of each action
        spawn(function()
            print("Auto Eat is now enabled.")
            local actionName = "Eat"
            while autoEatEnabled do
                for _, model in ipairs(npcFolder:GetChildren()) do
                    if model:IsA("Model") then
                        -- Attempt to find necessary body parts
                        local head = model:FindFirstChild("Head")
                        local upperTorso = model:FindFirstChild("UpperTorso")
                        local rightLowerLeg = model:FindFirstChild("RightLowerLeg")
                        local leftUpperArm = model:FindFirstChild("LeftUpperArm")
                        local rightUpperArm = model:FindFirstChild("RightUpperArm")

                        -- Check if all parts are available
                        if head and upperTorso and rightLowerLeg and leftUpperArm and rightUpperArm then
                            -- Define target based on head's position and calculate movement direction
                            local targetPosition = head.Position
                            local direction = (targetPosition - upperTorso.Position).Unit

                            -- Set up parameters to trigger eat action
                            local args = {
                                [1] = {
                                    ["AN"] = actionName,
                                    ["D"] = direction,
                                    ["O"] = targetPosition,
                                    ["FBP"] = upperTorso
                                }
                            }

                            -- Trigger server event for the eat action
                            game:GetService("ReplicatedStorage").Events.MainAttack:FireServer(unpack(args))
                        end
                    end
                end
                wait(1) -- Interval between each loop iteration to avoid overloading the server
            end
        end)
    else
        print("Auto Eat is now disabled.")
    end
end

Tab2:AddToggle({
    Name = "Toggle Auto Eat",
    Description = "Enable or disable Auto Eat for NPCs.",
    Default = false,
    Callback = function(state)
        toggleAutoEat(state)
    end
})

-- Teleport to selected NPC toggle
local function toggleKillNPC(state)
    teleporting = state
    if teleporting then
        if selectedModelName then
            if teleportLoop then
                teleportLoop:Disconnect()
            end
            teleportLoop = game:GetService("RunService").Heartbeat:Connect(function()
                local player = game.Players.LocalPlayer
                local character = player.Character or player.CharacterAdded:Wait()
                local selectedModel = npcFolder:FindFirstChild(selectedModelName)
                if selectedModel and character then
                    character:SetPrimaryPartCFrame(selectedModel.PrimaryPart.CFrame)
                end
            end)
            print("Started teleporting to the NPC: " .. selectedModelName)
        else
            print("No model selected!")
            toggleKillNPC(false)
        end
    else
        if teleportLoop then
            teleportLoop:Disconnect()
            teleportLoop = nil
            print("Stopped teleporting to the NPC.")
        end
    end
end

Tab2:AddToggle({
    Name = "Toggle Kill NPC",
    Description = "This toggle will start or stop teleporting to the selected NPC.",
    Default = false,
    Callback = toggleKillNPC
})

-- Equip "King Slayer" tool button
local Players = game:GetService("Players")
local player = Players.LocalPlayer

local function equipKingSlayer()
    local backpack = player.Backpack
    local kingSlayerTool = backpack:FindFirstChild("King Slayer")

    if kingSlayerTool and kingSlayerTool:IsA("Tool") then
        kingSlayerTool.Parent = player.Character
        print("Equipped King Slayer!")
    else
        print("King Slayer not found in backpack.")
    end
end

Tab2:AddButton({
    Name = "Equip King Slayer",
    Callback = function()
        equipKingSlayer()
    end
})

-- Resize NPC heads toggle
local function resizeNPCHeads()
    for _, npc in pairs(npcFolder:GetChildren()) do
        if npc:IsA("Model") then
            local head = npc:FindFirstChild("Head")
            if head then
                head.Size = head.Size * 15  -- Increase the head size by a factor of 15
            end
        end
    end
end

TabVisual:AddToggle({
    Name = "Resize NPC Heads",
    Description = "Increase the size of NPC heads by 15.",
    Default = false,
    Callback = function(state)
        if state then
            resizeNPCHeads()
            print("NPC heads resized.")
        else
            print("NPC heads size revert not implemented.")
        end
    end
})

-- ESP Code: Create BillboardGui to display name, health, and distance
local espEnabled = false

local function createESPForNPC(npc)
    local humanoid = npc:FindFirstChildOfClass("Humanoid")
    if not humanoid or humanoid.Health <= 0 then return end -- Skip NPCs with 0 health

    local billboardGui = Instance.new("BillboardGui")
    billboardGui.Name = "InfoGui"
    billboardGui.Size = UDim2.new(0, 100, 0, 90)
    billboardGui.Adornee = npc:FindFirstChild("HumanoidRootPart")
    billboardGui.StudsOffset = Vector3.new(0, 3, 0)
    billboardGui.AlwaysOnTop = true
    billboardGui.Parent = npc

    -- Create TextLabel for the NPC name (larger size)
    local nameLabel = Instance.new("TextLabel")
    nameLabel.Size = UDim2.new(1, 0, 0.4, 0)
    nameLabel.BackgroundTransparency = 1
    nameLabel.TextColor3 = Color3.new(1, 1, 1)
    nameLabel.TextStrokeTransparency = 0
    nameLabel.Text = npc.Name
    nameLabel.TextScaled = true -- Larger text for name label
    nameLabel.Parent = billboardGui

    -- Create TextLabel for the NPC health
    local healthLabel = Instance.new("TextLabel")
    healthLabel.Size = UDim2.new(1, 0, 0.3, 0)
    healthLabel.Position = UDim2.new(0, 0, 0.4, 0)
    healthLabel.BackgroundTransparency = 1
    healthLabel.TextColor3 = Color3.new(1, 0, 0)
    healthLabel.TextStrokeTransparency = 0
    healthLabel.Parent = billboardGui

    -- Create TextLabel for the distance
    local distanceLabel = Instance.new("TextLabel")
    distanceLabel.Size = UDim2.new(1, 0, 0.3, 0)
    distanceLabel.Position = UDim2.new(0, 0, 0.7, 0)
    distanceLabel.BackgroundTransparency = 1
    distanceLabel.TextColor3 = Color3.new(1, 0, 0)
    distanceLabel.TextStrokeTransparency = 0
    distanceLabel.TextScaled = true
    distanceLabel.Parent = billboardGui

    -- Function to update health and distance labels
    local function updateLabels()
        if humanoid.Health > 0 then
            healthLabel.Text = "Health: " .. math.ceil(humanoid.Health) .. "/" .. humanoid.MaxHealth
            local playerPosition = game.Players.LocalPlayer.Character.PrimaryPart.Position
            local npcPosition = npc.PrimaryPart.Position
            local distance = (playerPosition - npcPosition).magnitude
            distanceLabel.Text = "Distance: " .. math.ceil(distance) .. " studs"
        else
            billboardGui:Destroy() -- Remove if health reaches zero
        end
    end

    -- Update labels on a loop while ESP is enabled
    spawn(function()
        while espEnabled and billboardGui.Parent do
            updateLabels()
            wait(0.5)
        end
    end)

    return billboardGui
end

-- ESP toggle functionality in Visual tab
TabVisual:AddToggle({
    Name = "Toggle ESP",
    Description = "Enable or disable ESP for NPCs.",
    Default = false,
    Callback = function(state)
        espEnabled = state
        if espEnabled then
            for _, npc in pairs(npcFolder:GetChildren()) do
                if npc:IsA("Model") and not npc:FindFirstChild("InfoGui") then
                    createESPForNPC(npc)
                end
            end
        else
            for _, npc in pairs(npcFolder:GetChildren()) do
                local espGui = npc:FindFirstChild("InfoGui")
                if espGui then
                    espGui:Destroy()
                end
            end
        end
    end
})

-- Update dropdown options every 15.5 seconds and ESP every 2 seconds
while true do
    updateDropdown()
    wait(2)
end
